datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  timestamp DateTime?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId String    @db.ObjectId
}

enum ChannelType {
  DM
  GROUP
}

model Channel {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  channelType ChannelType? @default(DM)
  userIds     String[]     @db.ObjectId
  users       User[]       @relation(fields: [userIds], references: [id])
  messageIds  String[]     @db.ObjectId
  messages    Message[]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  channelIds    String[]  @db.ObjectId
  channels      Channel[] @relation(fields: [channelIds], references: [id])
  messages      Message[]
  friendOf      User[]    @relation("Friends", fields: [friendOfIds], references: [id])
  friendOfIds   String[]  @db.ObjectId
  friends       User[]    @relation("Friends", fields: [friendIds], references: [id])
  friendIds     String[]  @db.ObjectId
  accounts      Account[]
  sessions      Session[]
}
